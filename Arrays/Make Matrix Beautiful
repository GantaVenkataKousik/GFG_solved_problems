class Solution 
{
    //Function to find minimum number of operations that are required 
    //to make the matrix beautiful.
    static int findMinOperation(int matrix[][], int n)
    {
        // code here 
        int[] sumRow = new int[n];
        int[] sumCol = new int[n];
        // Calculate sumRow[] and sumCol[] array
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++) {
                sumRow[i] += matrix[i][j];
                sumCol[j] += matrix[i][j];
            }
        }
        
        int maxSum = 0,count = 0;
        for (int i = 0; i < n; i++) {
            maxSum = Math.max(maxSum, sumRow[i]);
            maxSum = Math.max(maxSum, sumCol[i]);
        }
        
        for(int i=0,j=0 ; i<n && j<n ;){
            int diff = Math.min(maxSum-sumRow[i],maxSum-sumCol[j]);
            
            matrix[i][j] += diff;
            sumRow[i] += diff;
            sumCol[j] += diff;
            
            count+= diff;
            
            if(sumRow[i]==maxSum){
                i++;
            }
            if(sumCol[j] == maxSum){
                j++;
            }
        }
        return count;
    }
}
