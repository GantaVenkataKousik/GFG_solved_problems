
class Solution
{
    //Function to find the minimum number of swaps required to sort the array.
    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    public int minSwaps(int nums[])
    {
        int n = nums.length;
        int dup[] = new int[n];
        for(int i=0 ; i<n  ; i++){
            dup[i] = nums[i];
        }
        Arrays.sort(dup);
        HashMap<Integer,Integer> mp = new HashMap<>();
        
        for(int i=0 ; i<n ; i++){
            mp.put(nums[i],i);
        }
        
        int swaps = 0;
        for(int i=0 ; i<n ; i++){
            if(nums[i] != dup[i]){
                //what to be placed i the current posiiont 
                //was is in hashmap
                swaps++;
                int idx = mp.get(dup[i]);
                mp.put(nums[i],idx);
                swap(nums,i,idx);
                mp.put(dup[i],i);
            }
        }
        return swaps;
    }
    
}
